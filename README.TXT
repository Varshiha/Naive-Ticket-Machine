Project: naive-ticket-machine
Authors: David Barnes and Michael Kölling

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling
   Pearson Education

It is discussed in chapter 2.

Purpose of project: To illustrate the basics of fields, constructors, and methods.
How to start this project: Create one or more TicketMachine objects.
Part II: Naive ticket machine:
2. The value that is returned when I got the machine's balance after it printed the ticket was 0. In fact, I put 500 and after printing it went back to 0. 
3. The number in getBalance kept increasing as I was adding money. After I printed a ticket and there was 1425 in my getBalance, when I went back in was 0 again. I am assuming it didn't refund me. It still pprinted a ticket when I only put 200 and there was only 200 in my getBalance.
5. The only that is different is the price number. For example instead of saying 1000 cents, it says 30 cents.
6. I think it will look like this: public class Student and public class LabClass
7. It does matter how we write it because it showed red lines and the name of the changed to public TicketMachine. I think it does show what is wrong. We see red on the side where the numbers are showing which lines are wrong. 
8. It is possible to take out the public.
9. When we take the word class it shows error when I try to compile it. 
10. Fields: private int price, private int balance and private int  total
Constructor: public TicketMachine (int cost)
Methods:getPrice, getBalance, insertMoney and printTicket
11. The constructor does not have a return type like int, string and void. The constructor will be called automatically after the object is created. While the method has to be done manually after the object is created. 
12. The type of the count field is int. The type of the representative field is Student. The type of the host field is Server.
13. The names of the fiels are alive, tutor and game.
14. Classes are Student, Server, Person and Game. 
15. Yes, it does matter. Everytime I would change it it would show error. No, it didnt because nothing changed. I just red lines when i would change the ordering. 
16. It is always necessary because if you dont pput any it will show error beside it.
17. private int status;
18. Student class
19. Two parameters which are String and double.
20. Yes or else the values would be lost after the constructor ends. The type will be String and the name will be title but I am pretty sure that it could be named something else since it doesn't have to match and the pther type will be double and its name will be price most likely to make it easier. 
21.public Pet(String petsName)
{
 pet = petsName
}
23. The method names are different in the headers and in the bodies each methods return a different field one is price and the other is balance.
24. How much money do I have saved up in my account?
25. It doesn't need to be changed becuase the fiel associated with doesn't have to have the same name. So the name of an accessor method does not have to math with the field name it returns. 
27.It says that there is a missing return statement.
28 Price's type is int when Print's type is void meaning it won't return a value.
29. insertMoney does have return statements to update whats in the get bslsnce but the print ticket does not because it prints it and then stops running.
32. It is a mutator because an accessor always has a return type that is not void. We would do a method called addCredits. The value would change to its credit if we do this with a Student Object. 
36. The number is 0.
37.  My cat has green eyes.
39. Instead of giving the price of the ticket it says "pricecents"
40. It says # price cents.
42. It shows the different prices. I am pretty sure it is because it takes the price we wrote when we add a new TicketMachine.
43. It does print the same output as the one I replaced (println to printf). %d means insert the next argument as an integer value and %n means end the line at this point.











 


